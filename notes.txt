pip install
- flask
- flask-sqlalchemy
- wtforms
- datetime
- pytz
- requests
- flask-migrate
- email-validator

------

to get secret key:
>>> import secrets
>>> n = secrets.token_hex(16)
>>> print(n) 
aaefde41a18eaf43211ee2c144660fa2

-----

to set up virtual environment:
[deactivate if need to exit prior]
python3 -m venv venv
.\venv\Scripts\activate

-----

example sqlalchemy in python interpreter:
PS C:\Users\mcgra\Documents\coding\coding_practice> python
Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from cs50class1 import db, Ticker                           
>>> from sqlalchemy import text
>>> db.execute(text("SELECT * FROM tickers WHERE MarketCap > 1000")).fetchall()
[(1, 'SUMITOMO MITSUI FINL GROUP I SPONSORED ADR', 'SSUMY', 3655.8, 'Diversified Industrial Goods Wholesale'), (2, 'Apple', 'AAPL', 3041.3, 'Computers, Phones & Household Electronics'), (3, 'MICROSOFT CORP', 'MSFT', 2585.1, 'Software & IT Services'), (4, 'ALPHABET INC', 'GOOGL', 1515.4, 'Software & IT Services'), (5, 'AMAZON COM INC', 'AMZN', 1333.4, 'Diversified Retail'), (6, 'NVIDIA CORPORATION', 'NVDA', 1105.8, 'Semiconductors & Semiconductor Equipment')]

>>> db.execute(text("DROP TABLE tickers"))

-----

code for companies/sqlalchemy
from sqlalchemy and plugging companies into website page
from flask import Flask, render_template
from cs50class1 import db, Ticker
import os
from sqlalchemy import create_engine, text, Column, String, Integer
from sqlalchemy.orm import scoped_session, sessionmaker
from sqlalchemy.ext.declarative import declarative_base
import random
import math

app = Flask(__name__)

engine = create_engine(os.getenv("DATABASE_URL"))
db = scoped_session(sessionmaker(bind=engine))

@app.route("/")
def home():
    limit = 10
    companies = db.execute(text("SELECT * FROM tickers LIMIT :n"), {"n": limit}).fetchall()
    number = db.execute(text("SELECT COUNT(*) from tickers")).fetchone()
    return render_template("home.html", companies=companies, number=number[0])

@app.route("/randomCo")
def randomCo():
    rn = random.random()
    number = db.execute(text("SELECT COUNT(*) from tickers")).fetchone()[0]
    company_id = math.floor((rn * number))
    company = db.execute(text("SELECT * FROM tickers WHERE id = :company_id"), {"company_id": company_id}).fetchone()
    return render_template("randomCo.html", company=company, number=number, company_id=company_id)

@app.route("/about")
def about():
    return render_template("about.html")

-----

linking to github:
git init
git add [files to add]
git commit -m "[text note about commit]"
git remote add origin https://github.com/FleetCentere/SomeAntics
git push -u origin master

-----

create form:
@app.route("/create", methods=["GET", "POST"])
def create():
    if request.method == "POST":
        title = request.form["title"]
        content = request.form["content"]

        if not title:
            flash("Title is required")
        elif not content:
            flash("Content is required")
        else:
            messages.append({"title": title, "content": content})
            return redirect(url_for("home"))
    return render_template("create.html")

    <label for="content">Message Content</label>
    <br>
    <textarea name="content" placeholder="Message content" rows="15" cols="60">{{ request.form["content"] }}</textarea>
    <br>
    <button type="submit">Submit</button>

    ----

    old company table:
    <tr>
            <td>{{ year }}</td>
            <td>${{ financials[list(financials.keys())[0]][year] }}</td>
            <td>${{ financials["CashCashEquivalentsRestrictedCashAndRestrictedCashEquivalents"][year] }}</td>
            <td>${{ financials["Assets"][year] }}</td>
            <td>${{ financials["Liabilities"][year] }}</td>
            <td>${{ financials["LongTermDebt"][year] }}</td>
            <td class="columnBreak"></td>
            <td>${{ financials["RevenueFromContractWithCustomerExcludingAssessedTax"][year] }}</td>
            <td>${{ financials["CostOfGoodsAndServicesSold"][year] }}</td>
            <td>${{ financials["GrossProfit"][year] }}</td>
            <td>${{ financials["NetCashProvidedByUsedInOperatingActivities"][year] }}</td>
            <td>${{ financials["NetCashProvidedByUsedInInvestingActivities"][year] }}</td>
            <td>${{ financials["NetCashProvidedByUsedInFinancingActivities"][year] }}</td>
        </tr>

-----

(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> flask --app ProjectFiles shell
Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)] on win32
App: ProjectFiles
Instance: C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\instance
>>> from ProjectFiles.models import pressReleases
>>> test = pressReleases(company="testCo", ticker="tsco", link="wwww.google.com", datePosted="2020-01-09")
>>> test
<CompanyPost testCo>

-----

(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> $env:FLASK_APP = "ProjectFiles"
(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> flask db init
Creating directory 'C:\\Users\\mcgra\\OneDrive\\Desktop\\AHM Docs\\Coding\\Project\\migrations' ...  done
Creating directory 'C:\\Users\\mcgra\\OneDrive\\Desktop\\AHM Docs\\Coding\\Project\\migrations\\versions' ...  done
Generating C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\migrations\alembic.ini ...  done
Generating C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\migrations\env.py ...  done
Generating C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\migrations\README ...  done
Generating C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\migrations\script.py.mako ...  done
Please edit configuration/connection/logging settings in 'C:\\Users\\mcgra\\OneDrive\\Desktop\\AHM Docs\\Coding\\Project\\migrations\\alembic.ini' before proceeding.        
(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> 

-----
password hashing:
(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> flask shell
Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)] on win32
App: ProjectFiles
Instance: C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\instance
>>> u = Users(username="Andrew", email="test@gmail.com")
>>> u.set_password("test_password")
>>> u.password_hash
'pbkdf2:sha256:600000$vz7QmcnnPvdCZrsd$af5cf47c6fa755d7b5c137ce14755456e6c710adc630d206ed3b4ca4ffd5545b'
>>> u.check_password("test_password")
True
>>> u.check_password("test_passworda") 
False

-----

users:
- Andrew, test
- Ben, test2
- zkxq4jw, ProjectFiles

-----

(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> flask shell
Python 3.11.3 (tags/v3.11.3:f3909b8, Apr  4 2023, 23:49:59) [MSC v.1934 64 bit (AMD64)] on win32
App: ProjectFiles
Instance: C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\instance
>>> Users.query.all()
[<User Andrew>, <User Ben>, <User zkxq4jw>]
>>> Users.query.filter_by(username="zkxq4jw")
<flask_sqlalchemy.query.Query object at 0x0000023823CC1D10>
>>> u = Users.query.filter_by(username="zkxq4jw") 
>>> u.email
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Query' object has no attribute 'email'
>>> u
<flask_sqlalchemy.query.Query object at 0x0000023823CC2090>
>>> u = Users.query.filter_by(username="zkxq4jw").first()
>>> u.email
'mcgrathan@gmail.com'
>>> u.password
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Users' object has no attribute 'password'
>>> u.password_hash
'pbkdf2:sha256:600000$x7CwbqNyQ9izgMdA$0aad1e4d3fdf7e0bae752e0db9b2b3f1b41ffe984717c225e74629e450de4c4c'
>>> u.check_password("ProjectFiles")
True

-----

>>> db.metadata.tables 
FacadeDict({'users': Table('users', MetaData(), Column('id', Integer(), table=<users>, primary_key=True, nullable=False), Column('username', String(length=50), table=<users>), Column('password_hash', String(length=128), table=<users>), Column('email', String(length=120), table=<users>), schema=None), 'ideas': Table('ideas', MetaData(), Column('id', Integer(), table=<ideas>, primary_key=True, nullable=False), Column('category', String(length=250), table=<ideas>), Column('link', String(length=250), table=<ideas>), Column('note', Text(), table=<ideas>), Column('status', String(length=50), table=<ideas>), Column('dateEntered', Date(), table=<ideas>, default=CallableColumnDefault(<function datetime.utcnow at 0x000001773C715800>)), Column('dateEdited', Date(), table=<ideas>), schema=None), 'press_releases': Table('press_releases', MetaData(), Column('id', Integer(), table=<press_releases>, primary_key=True, nullable=False), Column('company', String(length=250), table=<press_releases>), Column('ticker', String(length=10), table=<press_releases>), Column('link', String(length=100), table=<press_releases>), Column('product', String(length=50), table=<press_releases>), Column('datePosted', Date(), table=<press_releases>), Column('dateEntered', Date(), table=<press_releases>, default=CallableColumnDefault(<function datetime.utcnow at 0x000001773C716520>)), schema=None), 'events': Table('events', MetaData(), Column('id', Integer(), table=<events>, primary_key=True, nullable=False), Column('eventType', String(length=50), table=<events>), Column('eventDatetime', DateTime(), table=<events>, default=CallableColumnDefault(<function datetime.utcnow at 0x000001773C7172E0>)), Column('duration', Integer(), table=<events>), schema=None), 'content': Table('content', MetaData(), Column('id', Integer(), table=<content>, primary_key=True, nullable=False), Column('dateConsumed', Date(), table=<content>, default=CallableColumnDefault(<function datetime.utcnow at 0x000001773C717EC0>)), Column('dateMade', Date(), table=<content>), Column('contentType', String(length=50), table=<content>), Column('contentCreator', String(length=100), table=<content>), Column('contentLink', String(length=300), table=<content>), Column('contentRating', Integer(), table=<content>), Column('contentNote', Text(), table=<content>), schema=None), 'people': Table('people', MetaData(), Column('id', Integer(), table=<people>, primary_key=True, nullable=False), Column('person', String(length=50), table=<people>), Column('place', String(length=100), table=<people>), Column('date', Date(), table=<people>), schema=None)})
>>> db.metadata.tables.keys()
dict_keys(['users', 'ideas', 'press_releases', 'events', 'content', 'people'])
>>> Users.query.all()
[<User Andrew>, <User Ben>, <User zkxq4jw>]

-----
delete migrations folder
(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> flask shell
Python 3.11.5 (tags/v3.11.5:cce6ba9, Aug 24 2023, 14:38:34) [MSC v.1936 64 bit (AMD64)] on win32
App: ProjectFiles
Instance: C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\instance
>>> from sqlalchemy import text
>>> db.session.execute(text("DROP TABLE alembic_version")) 
<sqlalchemy.engine.cursor.CursorResult object at 0x0000026A85034210>

-----

@login.user_loader
def load_user(id):
    return Users.query.get(int(id))

class Users(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50))
    password_hash = db.Column(db.String(128))
    email = db.Column(db.String(120))

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f"<User {self.username}>"

class Ideas(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    category = db.Column(db.String(250))
    link = db.Column(db.String(250))
    note = db.Column(db.Text)
    status = db.Column(db.String(50))
    dateEntered = db.Column(db.Date, default=datetime.utcnow)
    dateEdited = db.Column(db.Date, default=None, nullable=True)

    def __repr__(self):
        return f"{self.category} on {self.dateEntered}"


class pressReleases(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    company = db.Column(db.String(250))
    ticker = db.Column(db.String(10))
    link = db.Column(db.String(100))
    product = db.Column(db.String(50))
    datePosted = db.Column(db.Date, index=True)
    dateEntered = db.Column(db.Date, default=datetime.utcnow)

    def __repr__(self):
        return f"{self.company}: {self.product} on {self.datePosted}"

class events(db.Model):
    # for events like exercise, meetings
    id = db.Column(db.Integer, primary_key=True)
    eventType = db.Column(db.String(50))
    eventDatetime = db.Column(db.DateTime, default=datetime.utcnow, index=True)
    duration = db.Column(db.Integer)

    def __repr__(self):
        return f"{self.eventType} on {self.eventDate}"

class Content(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    dateConsumed = db.Column(db.Date, default=datetime.utcnow, index=True)
    dateMade = db.Column(db.Date)
    contentType = db.Column(db.String(50)) # podcast, movies, shows, youtube, articles
    contentCreator = db.Column(db.String(100))
    contentLink = db.Column(db.String(300))
    contentRating = db.Column(db.Integer)
    contentNote = db.Column(db.Text)

    def __repr__(self):
        return f"{self.contentType} by {self.contentCreator}"

class people(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    person = db.Column(db.String(50))
    place = db.Column(db.String(100))
    date = db.Column(db.Date)

    def __repr__(self):
        return f"{self.person} on {self.date}"

-----

adding day and author to exercises
(venv) PS C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project> flask shell
Python 3.11.5 (tags/v3.11.5:cce6ba9, Aug 24 2023, 14:38:34) [MSC v.1936 64 bit (AMD64)] on win32
App: ProjectFiles
Instance: C:\Users\mcgra\OneDrive\Desktop\AHM Docs\Coding\Project\instance
>>> from datetime import datetime
>>> adate = dayTable(date=datetime(2023, 8, 27))        
>>> andrew = userTable.query.filter_by(username="andrew").first()
>>> adate.author=andrew
>>> db.session.add(adate)
>>> db.session.commit()
>>> dayTable.query.all()
[<dayTable 1>, <dayTable 2>, <dayTable 3>, <dayTable 4>]
>>> a = exersiseTable.query.first()  
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'exersiseTable' is not defined
>>> all = exerciseTable.query.all() 
>>> all[0]
<exerciseTable 1>
>>> all[0].author=andrew
>>> all[0].day = adate
>>> db.session.commit()
>>> all[1].exerciseType                     
'Walk'
>>> bdate = dayTable(date=datetime(2023, 8, 28), author=andrew)
>>> a[1].day = bdate
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'a' is not defined
>>> db.session.add(bdate)
>>> all[1].day = bdate
>>> all[1].author=andrew
>>> db.session.commit()
>>> all[2].exerciseType
'Peloton'
>>> cdate = dayTable(date=datetime(2023, 8, 29), author=andrew)
>>> db.session.add(cdate)
>>> all[2].day=cdate
>>> all[2].author=andrew
>>> db.session.commit()
>>> all[3].exerciseType
'Peloton'
>>> ddate = dayTable(date=datetime(2023, 8, 30), author=andrew)
>>> db.session.add(ddate)
>>> all[3].day=ddate
>>> all[3].author=andrew
>>> db.session.commit()
>>> all[4].exerciseType
'Abs'
>>> edate = dayTable(date=datetime(2023, 9, 3), author=andrew)
>>> db.session.add(edate)
>>> all[4].day=edate
>>> all[4].author=andrew
>>> db.session.commit()